"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("../actions/console");
const utils_1 = require("./utils");
const OutputLine_1 = require("../models/OutputLine");
const OutputStatusLine_1 = require("../models/OutputStatusLine");
const startupSound = document.getElementById('startupSound');
startupSound.volume = 0.2;
const renderScreen = console => {
    const output = console.map(outputLine => outputLine.getOutput());
    return console_1.consoleSetScreen(output);
};
function boot() {
    return (dispatch) => __awaiter(this, void 0, void 0, function* () {
        let console = [];
        dispatch(console_1.consoleSetState('booting'));
        startupSound.play();
        console.push(new OutputLine_1.default(['output'], 'INITIALIZING BOOT SEQUENCE...'));
        console.push(new OutputLine_1.default(['output'], ' '));
        dispatch(renderScreen(console));
        yield utils_1.delay(1100);
        console.push(new OutputLine_1.default(['output'], 'flybyBIOS -- v6.23 --'));
        console.push(new OutputLine_1.default(['output'], 'Copyright (C) 2018 - 2019, Crowbar studios, INC.'));
        console.push(new OutputLine_1.default(['output'], ' '));
        dispatch(renderScreen(console));
        yield utils_1.delay(1700);
        console.push(new OutputLine_1.default(['output'], '[      ] Running system check...'));
        dispatch(renderScreen(console));
        yield utils_1.delay(900);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, 'Main Processor: AMG 23Mhz'));
        dispatch(renderScreen(console));
        yield utils_1.delay(720);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, 'Memory Testing: 640k'));
        console.push(new OutputLine_1.default(['output'], ' '));
        dispatch(renderScreen(console));
        yield utils_1.delay(250);
        console.push(new OutputLine_1.default(['output'], 'Storage Testing: 16 Mhz, Quad Channel mode'));
        dispatch(renderScreen(console));
        yield utils_1.delay(550);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, '   Primary Master: BDC VC2300: 3.2MB'));
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, '   Primary Slave: EMPTY'));
        console.push(new OutputLine_1.default(['output'], ' '));
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console[5].text = '[>     ] Running system check...';
        console[6].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(350);
        console[5].text = '[=>    ] Running system check...';
        console[7].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(350);
        console[5].text = '[==>   ] Running system check...';
        console[8].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(400);
        console[5].text = '[===>  ] Running system check...';
        console[9].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console[5].text = '[====> ] Running system check...';
        console[10].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console[5].text = '[=====>] Running system check...';
        console[11].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console[5].text = '[  OK  ] Running system check...';
        dispatch(renderScreen(console));
        yield utils_1.delay(400);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, 'react mount'));
        dispatch(renderScreen(console));
        yield utils_1.delay(300);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, 'node_modules transfer size 6.75 GB'));
        dispatch(renderScreen(console));
        yield utils_1.delay(100);
        console[12].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console.push(new OutputStatusLine_1.default(['output'], OutputStatusLine_1.LINE_STATUS.LOADING, 'humor module'));
        dispatch(renderScreen(console));
        yield utils_1.delay(100);
        console[13].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(300);
        console[14].status = OutputStatusLine_1.LINE_STATUS.OK;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console[15].status = OutputStatusLine_1.LINE_STATUS.FAIL;
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console.push(new OutputLine_1.default(['output'], ' '));
        console.push(new OutputLine_1.default(['output'], ' '));
        console.push(new OutputLine_1.default(['output'], ' '));
        console.push(new OutputLine_1.default(['output'], 'Press DEL to enter SETUP    ; press Alt + F4 to quit'));
        console.push(new OutputLine_1.default(['output'], '03/01/1993 BDC-PPP-1.5'));
        dispatch(renderScreen(console));
        yield utils_1.delay(500);
        dispatch(renderScreen(console));
        yield utils_1.delay(200);
        console.push(new OutputLine_1.default(['output'], ' '));
        console.push(new OutputLine_1.default(['output'], 'Loading GUI...'));
        dispatch(renderScreen(console));
        yield utils_1.delay(2000);
        dispatch(console_1.consoleClear());
        yield utils_1.delay(500);
        dispatch(console_1.consoleSetState('ready'));
        let typeSpeed = 70;
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('b'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('br'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('bra'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('bran'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brand'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brando'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_c'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_ch'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_cha'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_chan'));
        yield utils_1.delay(typeSpeed);
        dispatch(console_1.consoleSetInitialText('brandon_chang'));
        yield utils_1.delay(typeSpeed);
    });
}
exports.default = boot;
//# sourceMappingURL=boot.js.map